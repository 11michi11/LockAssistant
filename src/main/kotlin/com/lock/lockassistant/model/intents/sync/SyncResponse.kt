/*
 * SyncResponse.kt
 *
 * This code was generated by json-kotlin-schema-codegen - JSON Schema Code Generator
 * See https://github.com/pwall567/json-kotlin-schema-codegen
 *
 * It is not advisable to modify generated code as any modifications will be lost
 * when the generation process is re-run.
 */
package com.lock.lockassistant.model.intents.sync

import java.util.UUID

/**
 * This intent is triggered at user setup or when a user reconnects through the Action (to reconnect or disconnect) when necessary to resync devices in batch (for example, when new traits are added).
 */
data class SyncResponse(
    /** ID of the corresponding request. */
    val requestId: UUID,
    /** Intent response payload. */
    val payload: Payload
) {

    /**
     * Intent response payload.
     */
    data class Payload(
        /** Reflects the unique (and immutable) user ID on the agent's platform. The string is opaque to Google, so if there's an immutable form vs a mutable form on the agent side, use the immutable form (e.g. an account number rather than email). */
        val agentUserId: String,
        /** For systematic errors on SYNC */
        val errorCode: String? = null,
        /** Detailed error which will never be presented to users but may be logged or used during development. */
        val debugString: String? = null,
        /** List of devices owned by the user. Zero or more devices are returned (zero devices meaning the user has no devices, or has disconnected them all). */
        val devices: List<Device>
    )

    /**
     * Device metadata.
     */
    data class Device(
        /** The ID of the device in the developer's cloud. This must be unique for the user and for the developer, as in cases of sharing we may use this to dedupe multiple views of the same device. It should be immutable for the device; if it changes, the Assistant will treat it as a new device. */
        val id: String,
        /** The hardware type of device. */
        val type: String,
        /** List of traits this device has. This defines the commands, attributes, and states that the device supports. */
        val traits: List<String>,
        /** Names of this device. */
        val name: Name,
        /** Indicates whether this device will have its states updated by the Real Time Feed. (true to use the Real Time Feed for reporting state, and false to use the polling model.) */
        val willReportState: Boolean,
        /** Indicates whether notifications are enabled for the device. */
        val notificationSupportedByAgent: Boolean = false,
        /** Provides the current room of the device in the user's home to simplify setup. */
        val roomHint: String? = null,
        /** Contains fields describing the device for use in one-off logic if needed (e.g. 'broken firmware version X of light Y requires adjusting color', or 'security flaw requires notifying all users of firmware Z'). */
        val deviceInfo: DeviceInfo? = null,
        /** Aligned with per-trait attributes described in each trait schema reference. */
        val attributes: Attributes? = null,
        /** Object defined by the developer which will be attached to future QUERY and EXECUTE requests, maximum of 512 bytes per device. Use this object to store additional information about the device your cloud service may need, such as the global region of the device. Data in this object has a few constraints: No sensitive information, including but not limited to Personally Identifiable Information. */
        val customData: CustomData? = null,
        /** List of alternate IDs used to identify a cloud synced device for local execution. */
        val otherDeviceIds: List<OtherDeviceId>? = null
    ) {

        init {
            require(cg_regex0.containsMatchIn(type)) { "type does not match pattern $cg_regex0 - $type" }
            for (cg_11 in traits)
                require(cg_regex1.containsMatchIn(cg_11)) { "traits item does not match pattern $cg_regex1 - $cg_11" }
        }

    }

    /**
     * Names of this device.
     */
    data class Name(
        /** List of names provided by the developer rather than the user, often manufacturer names, SKUs, etc. */
        val defaultNames: List<String>? = null,
        /** Primary name of the device, generally provided by the user. This is also the name the Assistant will prefer to describe the device in responses. */
        val name: String,
        /** Additional names provided by the user for the device. */
        val nicknames: List<String>? = null
    )

    /**
     * Contains fields describing the device for use in one-off logic if needed (e.g. 'broken firmware version X of light Y requires adjusting color', or 'security flaw requires notifying all users of firmware Z').
     */
    data class DeviceInfo(
        /** Especially useful when the developer is a hub for other devices. Google may provide a standard list of manufacturers here so that e.g. TP-Link and Smartthings both describe 'osram' the same way. */
        val manufacturer: String? = null,
        /** The model or SKU identifier of the particular device. */
        val model: String? = null,
        /** Specific version number attached to the hardware if available. */
        val hwVersion: String? = null,
        /** Specific version number attached to the software/firmware, if available. */
        val swVersion: String? = null
    )

    /**
     * Aligned with per-trait attributes described in each trait schema reference.
     */
    open class Attributes

    /**
     * Object defined by the developer which will be attached to future QUERY and EXECUTE requests, maximum of 512 bytes per device. Use this object to store additional information about the device your cloud service may need, such as the global region of the device. Data in this object has a few constraints: No sensitive information, including but not limited to Personally Identifiable Information.
     */
    open class CustomData

    /**
     * Alternate device ID.
     */
    data class OtherDeviceId(
        /** The agent's ID. Generally, this is the project ID in the Actions console. */
        val agentId: String? = null,
        /** Device ID defined by the agent. The device ID must be unique. */
        val deviceId: String
    )

    companion object {
        private val cg_regex0 = Regex("^action.devices.types.[a-zA-z]+\$")
        private val cg_regex1 = Regex("^action.devices.traits.[a-zA-z]+\$")
    }

}
