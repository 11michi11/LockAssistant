/*
 * ExecuteResponse.kt
 *
 * This code was generated by json-kotlin-schema-codegen - JSON Schema Code Generator
 * See https://github.com/pwall567/json-kotlin-schema-codegen
 *
 * It is not advisable to modify generated code as any modifications will be lost
 * when the generation process is re-run.
 */
package com.lock.lockassistant.model.intents.execute

import java.util.UUID

/**
 * This intent is triggered to provide commands to execute on smart home devices. The new state should be provided in the response if available. One triggered intent can target multiple devices, with multiple commands. For example, a triggered intent may set both brightness and color on a set of lights or may set multiple lights each to a different color.
 */
data class ExecuteResponse(
    /** ID of the corresponding request. */
    val requestId: UUID,
    /** Intent response payload. */
    val payload: Payload
) {

    /**
     * Intent response payload.
     */
    data class Payload(
        /** An error code for the entire transaction for auth failures and developer system unavailability. For individual device errors, use the errorCode within the device object. */
        val errorCode: String? = null,
        /** Detailed error which will never be presented to users but may be logged or used during development. */
        val debugString: String? = null,
        /** Each object contains one or more devices with response details. N.B. These may not be grouped the same way as in the request. For example, the request might turn 7 lights on, with 3 lights succeeding and 4 failing, thus with two groups in the response. */
        val commands: List<Command>? = null
    )

    /**
     * Device execution result.
     */
    data class Command(
        /** List of device IDs corresponding to this status. */
        val ids: List<String>,
        /** Result of the execute operation. */
        val status: String,
        /** Aligned with per-trait states described in each trait schema reference. These are the states after execution, if available. */
        val states: States? = null,
        /** Expanding ERROR state if needed from the preset error codes, which will map to the errors presented to users. */
        val errorCode: String? = null
    )

    /**
     * Aligned with per-trait states described in each trait schema reference. These are the states after execution, if available.
     */
    data class States(
        /** Indicates if the device is online (that is, reachable) or not. */
        val online: Boolean? = null
    )

}
