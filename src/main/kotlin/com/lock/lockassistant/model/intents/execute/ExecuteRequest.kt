/*
 * ExecuteRequest.kt
 *
 * This code was generated by json-kotlin-schema-codegen - JSON Schema Code Generator
 * See https://github.com/pwall567/json-kotlin-schema-codegen
 *
 * It is not advisable to modify generated code as any modifications will be lost
 * when the generation process is re-run.
 */
package com.lock.lockassistant.model.intents.execute

import java.util.UUID

/**
 * This intent is triggered to provide commands to execute on smart home devices. The new state should be provided in the response if available. One triggered intent can target multiple devices, with multiple commands. For example, a triggered intent may set both brightness and color on a set of lights or may set multiple lights each to a different color.
 */
data class ExecuteRequest(
    /** ID of the request. */
    val requestId: UUID,
    /** List of inputs matching the intent request. */
    val inputs: List<Input>
) {

    /**
     * Type and payload associated with the intent request.
     */
    data class Input(
        /** Intent request type. */
        val intent: String,
        /** EXECUTE request payload. */
        val payload: Payload
    ) {

        init {
            require(intent == cg_str0) { "intent not constant value $cg_str0 - $intent" }
        }

    }

    /**
     * EXECUTE request payload.
     */
    data class Payload(
        /** List of device target and command pairs. */
        val commands: List<Command>
    )

    /**
     * Set of commands to execute on the attached device targets.
     */
    data class Command(
        /** List of target devices. */
        val devices: List<Device>,
        /** List of commands to execute on target devices. */
        val execution: List<Execution>
    )

    /**
     * Device target to execute.
     */
    data class Device(
        /** Device ID, as per the ID provided in SYNC. */
        val id: String,
        /** If the opaque customData object is provided in SYNC, it's sent here. */
        val customData: CustomData? = null
    )

    /**
     * If the opaque customData object is provided in SYNC, it's sent here.
     */
    open class CustomData

    /**
     * Device command.
     */
    data class Execution(
        /** The command to execute, usually with accompanying parameters. */
        val command: String,
        /** Aligned with the parameters for each command. */
        val params: Params? = null
    )

    /**
     * Aligned with the parameters for each command.
     */
    open class Params

    companion object {
        private const val cg_str0 = "action.devices.EXECUTE"
    }

}
